package invision

import com.squareup.moshi.Moshi
import java.io.File
import java.util.regex.Pattern
import javax.xml.parsers.DocumentBuilderFactory
import javax.xml.transform.dom.DOMSource
import org.w3c.dom.Document
import org.w3c.dom.Node
import java.nio.file.Files
import java.nio.file.StandardCopyOption
import javax.xml.parsers.DocumentBuilder
import javax.xml.transform.OutputKeys
import javax.xml.transform.stream.StreamResult
import javax.xml.transform.TransformerFactory

const val HELP_ERROR =
        """java -jar invision.jar _path_to_invision_ _path_to_project_
    You need to extract the json from Invision's index.html...
    Correct all the keys that aren't in quotes...
    And write that to index_pretty.json in the same directory.
    I find these vim commands helpful:
    :%s/^\\s*/
    :%s/^[a-zA-Z][a-zA-Z]*/\"\\0\""""
const val HELP_FIRST_TIME =
        """It looks like this is your first time adding an Invision prototype to this project.
    We'll create a file called NewAndroidManifest.xml; copy this over your existing manifest.
    We'll also create a file called classmap.json. To replace an InvisionActivity with a
    real Android activity, edit this file and change the name to the new Activity name
    and also change autoGenerated to false, then re-run invision.jar.
    """

fun main(args: Array<String>) {
    if (!validateArgs(args)) { help(); return }

    val invisionPath = File(args[0]).absoluteFile.toString()
    val invisionJson = (invisionPath + "/index_pretty.json").getStringFromFile()
    val moshi = Moshi.Builder().build()
    val invision = moshi.adapter(Invision::class.java).fromJson(invisionJson)
    if (invision == null) { help(); return }

    val path = File(args[1]).absoluteFile.toString()
    val app = AndroidApp(path)
    if (!app.validate()) { help(); return }

    System.out.println(app)
    System.out.println("There are ${invision.hotspots.size} hotspots on ${invision.screens.size} screens!")

    if (!app.generateClassMap(invision)) {
        firstRunHelp();
    }

    invision.screens.forEach { screen ->
        val className = app.classMap.getName(screen.id)
        val activity = app.findActivityByClassName(className)
        if (activity == null) {
            app.addActivity(className = className, home = screen.id == invision.project.homeScreenID)

        } else {
            System.out.println(activity.attributes.getNamedItem("android:name").nodeValue)
        }
    }

    invision.screens.forEach { screen ->
        if (app.classMap.get(screen.id)?.autoGenerated?:false) {
            val className = app.classMap.getName(screen.id)
            val fileSpec = ScreenClassBuilder(app.packageName?:"", invision).setClassMap(app.classMap).setScreen(screen).build()
            val output = File(path + "/app/src/main/java/")
            if (fileSpec == null) {
                System.out.println("Failed to create class ${className}")
            } else {
                fileSpec.writeTo(output)
            }

            Files.copy(File("${invisionPath}/${screen.imageUrl}").toPath(), File("${path}/app/src/main/res/drawable/inv${screen.id}.png").toPath(), StandardCopyOption.REPLACE_EXISTING)
        }
    }
    writeNewManifest(app.manifest, path)
    writeFixedFiles(path, app.packageName?:"")

}

fun writeFixedFiles(path: String, packageName: String) {
    writeToFile(path + "/app/src/main/java/" + packageName.replace('.', '/') + "/invision/BaseInvisionActivity.kt",
            getBaseActivity(packageName))
    writeToFile(path + "/app/src/main/java/" + packageName.replace('.', '/') + "/invision/Hotspot.kt",
            getHotspot(packageName))
    writeToFile(path + "/app/src/main/res/layout/" + "invision_activity.xml",
            getActivityLayout(packageName))
}

fun writeToFile(fileName: String, text: String) {
    val theFile = File(fileName)
    if (!theFile.exists()) {
        theFile.parentFile.mkdirs()
        theFile.createNewFile()
        theFile.writeText(text)
    }
}


fun firstRunHelp() {
    System.out.println(HELP_FIRST_TIME)
}

fun  getLauncherIntentFilter(manifest: Document): Node {
    val intentFilter = manifest.createElement("intent-filter")
    val action = manifest.createElement("action")
    action.setAttribute("android:name", "android.intent.action.MAIN")
    val category = manifest.createElement("category")
    category.setAttribute("android:name", "android.intent.category.LAUNCHER")
    intentFilter.appendChild(action)
    intentFilter.appendChild(category)
    return intentFilter
}

fun validateArgs(args: Array<String>) : Boolean {
    if (args.size < 2) {
        return false
    }
    if (args[0].isEmpty() || args[1].isEmpty()) {
        return false
    }
    try {
        if(!File(args[1]).exists()) {
            return false
        }
    } catch (e: Exception) {
        return false
    }
    try {
        if(!File(args[0]).exists()) {
            return false
        }
    } catch (e: Exception) {
        return false
    }
    return true
}

fun help() {
    System.out.println(HELP_ERROR)
}

fun  getPackageFromBuildGradle(buildGradle: String?): String? {
    val appIdPattern = Pattern.compile("""applicationId\s*(["'`])([^"'`]*)\1""")
    val appIdMatcher = appIdPattern.matcher(buildGradle)
    if (appIdMatcher.find()) else return null
    return appIdMatcher.group(2)
}

private fun writeNewManifest(manifest: Document?, path: String) {
    val ds = DOMSource(manifest)
    val transformerFactory = TransformerFactory.newInstance()
    val transformer = transformerFactory.newTransformer()
    transformer.setOutputProperty(OutputKeys.INDENT, "yes");
    transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");
    val result = StreamResult(path + "/app/src/main/NewAndroidManifest.xml")
    transformer.transform(ds, result)
}

fun String.getStringFromFile(): String? {
    val jsonFile = File(this)
    if (!jsonFile.exists()) {
        return null
    }
    val stream = jsonFile.inputStream()
    val string = stream.bufferedReader().use {
        it.readText()
    }
    return string
}

fun getDocBuilder() : DocumentBuilder {
    val dbf = DocumentBuilderFactory.newInstance()
    return dbf.newDocumentBuilder()
}

data class Invision (val hotspots: Array<Hotspot>, val project: Project, val screens: Array<Screen>)

data class Hotspot (val height: Int, val width: Int, val x: Int, val y: Int, val screenID: Int, val targetScreenID: Int)

data class Project (val homeScreenID: Int)

data class Screen (val imageUrl: String, val height: Int, val width: Int, val id: Int, val name: String)

